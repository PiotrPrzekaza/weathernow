{"version":3,"sources":["components/Form.js","components/Result.js","components/Header.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","type","value","placeholder","onChange","change","Result","_props$weather","weather","date","city","sunrise","sunset","temp","wind","pressure","err","content","sunriseTime","Date","toLocaleTimeString","sunsetTime","Fragment","className","concat","Header","App","state","handleInputChange","e","_this","setState","target","prevProps","prevState","_this2","this","length","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","sys","main","speed","catch","console","log","src_components_Header","components_Form","src_components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.415119b4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Form = props => {\r\n  return (\r\n    <form >\r\n      <input\r\n        type=\"text\"\r\n        value={props.value}\r\n        placeholder=\"wpisz miasto\"\r\n        onChange={props.change}\r\n      />\r\n\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport './Result.css';\r\n\r\nconst Result = (props) => {\r\n  const { date,\r\n    city,\r\n    sunrise,\r\n    sunset,\r\n    temp,\r\n    wind,\r\n    pressure,\r\n    err, } = props.weather;\r\n\r\n  let content = null;\r\n\r\n\r\n\r\n  if (!err && city) {\r\n    const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n    const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n    content = (\r\n      <>\r\n        <h3>Wyniki wyszukiwania dla  <em>{city}</em></h3>\r\n        <h4>Dane dla dnia i godziny {date}</h4>\r\n        <h4>Aktualna temperatura: {temp}&#176;C </h4>\r\n        <h4>Wschód słońca dzisiaj o {sunriseTime}</h4>\r\n        <h4>Zachód słońca dzisiaj o {sunsetTime}</h4>\r\n        <h4>Siła wiatru {wind}m/s</h4>\r\n        <h4>Ciśnienie atmosferyczne {pressure}hPa</h4>\r\n      </>\r\n    )\r\n  }\r\n  return (\r\n    <div className=\"result\">\r\n      {err ? `Nie mamy w bazie ${city}` : content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React from 'react';\r\nimport './Header.css';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"head\">\r\n            <h1>Apllikacja Pogodowa</h1>\r\n            <p>Zobacz aktualne warunki pogodowe</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Form from \"./Form\";\r\nimport Result from \"./Result\";\r\nimport Header from \"./Header\";\r\nconst APIKey = 'e8262e8198c432a6b5e7ee3aa1d8bec8';\r\nclass App extends Component {\r\n  state = {\r\n    value: \"\",\r\n    date: \"\",\r\n    city: \"\",\r\n    sunrise: \"\",\r\n    sunset: \"\",\r\n    temp: \"\",\r\n    wind: \"\",\r\n    pressure: \"\",\r\n    err: \"\",\r\n  };\r\n\r\n\r\n\r\n  handleInputChange = e => {\r\n    this.setState({\r\n      value: e.target.value\r\n    });\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n\r\n    if (this.state.value.length === 0) return\r\n    if (prevState.value !== this.state.value) {\r\n\r\n\r\n      const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\r\n      fetch(API)\r\n        .then(response => {\r\n          if (response.ok) {\r\n            return response\r\n          }\r\n          throw Error(\"Nie udało się\")\r\n        })\r\n        .then(response => response.json())\r\n        .then(data => {\r\n          const time = new Date().toLocaleString()\r\n          this.setState(prevState => ({\r\n            err: false,\r\n            date: time,\r\n            city: prevState.value,\r\n            sunrise: data.sys.sunrise,\r\n            sunset: data.sys.sunset,\r\n            temp: data.main.temp,\r\n            wind: data.wind.speed,\r\n            pressure: data.main.pressure,\r\n          }))\r\n        })\r\n        .catch(err => {\r\n          console.log(err);\r\n          this.setState(prevState => ({\r\n            err: true,\r\n            city: prevState.value,\r\n          }))\r\n        })\r\n    }\r\n  }\r\n\r\n  // handleCitySubmit = (e) => {\r\n  //   e.preventDefault();\r\n\r\n  //   const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&APPID=${APIKey}&units=metric`;\r\n\r\n\r\n  //   fetch(API)\r\n  //     .then(response => {\r\n  //       if (response.ok) {\r\n  //         return response\r\n  //       }\r\n  //       throw Error(\"Nie udało się\")\r\n  //     })\r\n  //     .then(response => response.json())\r\n  //     .then(data => {\r\n  //       const time = new Date().toLocaleString()\r\n  //       this.setState(prevState => ({\r\n  //         err: false,\r\n  //         date: time,\r\n  //         city: prevState.value,\r\n  //         sunrise: data.sys.sunrise,\r\n  //         sunset: data.sys.sunset,\r\n  //         temp: data.main.temp,\r\n  //         wind: data.wind.speed,\r\n  //         pressure: data.main.pressure,\r\n  //       }))\r\n  //     })\r\n  //     .catch(err => {\r\n  //       console.log(err);\r\n  //       this.setState(prevState => ({\r\n  //         err: true,\r\n  //         city: prevState.value,\r\n  //       }))\r\n  //     })\r\n  // }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Form value={this.state.value} change={this.handleInputChange} />\r\n        <Result weather={this.state} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}